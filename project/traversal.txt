g_map = ...  // holds global mapping where the keys are a list of all
             // source files under consideration and values are a vector
             // of parsed include statements.  Path references in the
             // coming section will be references into keys of this
             // container.  Only paths that are keys in this container
             // will be needed.

for each project:
    map   = {} // holds file -> first-level (resolved) dependencies

    stack = [] // implemented with vector
    put all cpps in project into stack

    while queue not empty:
        take next file out of stack
        if it is in the map
            continue // because there will be duplicates in the stack
        get list of includes from g_map
        resolve the includes to a vector of references into g_map
        add (file, include-list) into map
        for each file in include-list:
            if it is not in the map, add it to the stack

    construct graph from map
    for each cpp in project:
        get list of accessible files, and write to CL.read.1.tlog
